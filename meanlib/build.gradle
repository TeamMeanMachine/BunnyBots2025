import groovy.json.JsonSlurper

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.3.2"
    id "org.jetbrains.kotlin.jvm" version "2.2.0"
    id "org.jetbrains.kotlin.kapt" version "2.2.0"
    id "idea"
    id "maven-publish"
    id "java-library"
}
// Disable all simulation and deploy tasks since meanlib is a library
gradle.afterProject { proj ->
    if (proj.name == "meanlib") {
        proj.tasks.configureEach { task ->
            if (task.name.toLowerCase().contains("simulate") ||
                    task.name.toLowerCase().contains("deploy")) {
                task.enabled = false
            }
        }
    }
}


group = "org.team2471.lib"
version = "2025"

repositories {
    mavenCentral()
    maven { url "https://frcmaven.wpi.edu/artifactory/release/" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://maven.ctr-electronics.com/release/" }
    maven { url "https://maven.revrobotics.com/" }
    maven { url "https://maven.photonvision.org/repository/internal" }
    maven { url "https://frcmaven.wpi.edu/artifactory/littletonrobotics-mvn-release/" }
    maven { url "https://lib.choreo.autos/dep" }
    maven { url "https://shenzhen-robotics-alliance.github.io/maple-sim/vendordep/repos/releases" }
}

kotlin {
    jvmToolchain(17)
}

wpi.java.debugJni = false
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.9.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    implementation "org.apache.commons:commons-math3:3.6.1"

    testImplementation "org.junit.jupiter:junit-jupiter:5.10.1"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"

    def akitFile = file("$projectDir/vendordeps/AdvantageKit.json")
    kapt "org.littletonrobotics.akit:akit-autolog:${new JsonSlurper().parseText(akitFile.text).version}"
}

tasks.test {
    useJUnitPlatform()
    systemProperty "junit.jupiter.extensions.autodetection.enabled", "true"
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += "-XDstringConcat=inline"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "17"
    }
}

wpi.java.configureTestTasks(tasks.test)
// Prevent GradleRIO from trying to configure executable tasks
wpi.java.configureExecutableTasks(null)

/*tasks.matching { it.name.startsWith("simulate") || it.name.startsWith("deploy") }.configureEach {
    enabled = false
}*/



tasks.register("printVendordeps") {
    doLast {
        def vd = file("$projectDir/vendordeps")
        if (!vd.exists()) {
            println "No vendordeps folder found"
        } else {
            vd.listFiles().each {
                if (it.name.endsWith(".json")) {
                    println "Vendordep: ${it.name}"
                    try {
                        def json = new JsonSlurper().parseText(it.text)
                        println "  name: ${json.name}, version: ${json.version}"
                    } catch (e) {
                        println "  (bad JSON)"
                    }
                }
            }
        }
    }
}

/*tasks.matching { it.name.startsWith("simulate") || it.name.startsWith("deploy") }.configureEach {
    enabled = false
}
wpi.java.configureExecutableTasks(null)*/

